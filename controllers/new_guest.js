import { Composer, Scenes,session } from "telegraf";
import { isActualBookingByPhone} from "../db_utils/db_utils.js";
import { updateNewUserByPhone, updateUserPhotoByPhone } from "../db_utils/db_update.js";
import { isTruePhone, userData, saveDocFromChat } from "../utils/utils.js";
import { setupBot }  from "../bot.js";
const webAppUrl = "https://smart-hotel.netlify.app/dashboard/1";

const askPhone = new Composer();
askPhone.on("text", async (ctx) => {
	await ctx.reply(
		"–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ  +–•–• –•–•–• –•–•–• –•–• –•–•"
	);
	return ctx.wizard.next();
});

const getPhone = new Composer();
getPhone.hears("start", async (ctx) => {
	setupBot().launch();
});
getPhone.on("text", async (ctx) => {
	const msg = ctx.message;
	const phoneNumber = msg.text;
	
	if (isTruePhone(phoneNumber).result) {
		const { phone } = isTruePhone(phoneNumber);
		ctx.session.phone=phone;
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		const isFind = await isActualBookingByPhone(phone);
		if (isFind) {
			await ctx.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞üòä");
			updateNewUserByPhone(phone, userData(msg), "nobody");
			await ctx.reply(
				"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç—ã - –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞"
			);
			return ctx.scene.enter("checkPhoto");
		} else {
			await ctx.reply(
				"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüòî"
			);
			await ctx.reply("–í–æ–∑–º–æ–∂–Ω–æ –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!");
		}
		return ctx.scene.reenter("askPhone");
	} else {
		await ctx.reply(
			"–ù–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—Éü§∑‚Äç‚ôÄÔ∏è"
		);
		return ctx.scene.reenter("askPhone");
	}
});

const checkPhoto = new Scenes.BaseScene("checkPhoto");
checkPhoto.hears("start", async (ctx) => {
	setupBot().launch();
});

checkPhoto.on("document", async (ctx) => {
	const targetChatId = 909198449;
	// saveDocFromChat(ctx);
	await ctx.telegram.sendMessage(
		targetChatId,
		`–ì–æ—Å—Ç—å ${ctx.message.chat.first_name} (${ctx.message.chat.username}) –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`
	);
	updateUserPhotoByPhone(ctx);
	console.log(ctx.message);
	await ctx.forwardMessage(targetChatId, ctx.message.chat.id, ctx.message.message_id);
	await ctx.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É");
	await ctx.reply("–ú—ã –ø—Ä–∏—à–ª–µ–º –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!");
	const delaySeconds = 3;
	setTimeout(async () => {
		await ctx.reply("–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
	}, delaySeconds * 1000);
	setTimeout(async () => {
		await ctx.reply("–í–∞—à–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É --");
		await ctx.sendLocation(41.64560982834371, 41.61851927863314);
	}, delaySeconds * 2000);
	setTimeout(async () => {
		await ctx.reply("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞—à –≥–∞–π–¥ –ø–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º");
		await ctx.reply("Gide.pdf");
	}, delaySeconds * 3000);
	setTimeout(async () => {
		await ctx.reply("–£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –í—ã —Å—Ç–∞–Ω–µ—Ç–µ –Ω–∞—à–∏–º –ì–æ—Å—Ç–µ–º!");
		await ctx.telegram.sendMessage(
			ctx.message.chat.id,
			"–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–æ—Å—å –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—É—Å–ª—É–≥–∏",
			{
				reply_markup: {
					keyboard: [
						[
							{
								text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏",
								web_app: { url: webAppUrl },
							},
							{ text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" },
						],
					],
					resize_keyboard: true,
				},
			}
		);
	}, delaySeconds * 4000);
	ctx.scene.leave("checkPhoto");
});

checkPhoto.on("message", async (ctx) => {
	if (typeof ctx.message.document === "undefined") {
		await ctx.reply("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ");
		ctx.scene.enter("reAskPhoto");
	} else ctx.scene.leave("checkPhoto");
});

const docsApprove = new Scenes.BaseScene("docsApprove");
// docsApprove.sendMessage(ctx);

const reAskPhoto = new Scenes.BaseScene("reAskPhoto");
reAskPhoto.hears("start", async (ctx) => {
	setupBot().launch();
});
reAskPhoto.enter(async (ctx) => {
	await ctx.reply(
		"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞"
	);
	ctx.scene.enter("checkPhoto");
});

const firstTimeScene = new Scenes.WizardScene("sceneWizard", askPhone, getPhone);

export { firstTimeScene, reAskPhoto, checkPhoto };
