import { FieldSet, Record as AirtableRecord, Records, Table } from 'airtable';
import { QueryParams } from 'airtable/lib/query_params';
import { IAirtableConfig, IAirtableRecord, IAirtableValue } from './easy-airtable';
export declare class EasyAirtableTable {
    private readonly table;
    private readonly policy;
    constructor(table: Table<FieldSet>);
    static fromConfig({ apiKey, baseId, tableId }: IAirtableConfig): EasyAirtableTable;
    findOneById(id: string, usingFieldId?: boolean): Promise<AirtableRecord<any>>;
    findBy(where: Record<string, IAirtableValue>, options?: QueryParams<FieldSet>): Promise<Records<any>>;
    findAll(options?: QueryParams<FieldSet>): Promise<Records<any>>;
    findOneBy(where: Record<string, IAirtableValue>, options?: QueryParams<FieldSet>): Promise<AirtableRecord<FieldSet> | void>;
    create(where: Record<string, IAirtableValue>): Promise<AirtableRecord<any>>;
    updateOne(id: string, where: Record<string, IAirtableValue>): Promise<AirtableRecord<any>>;
    update(entities: IAirtableRecord[]): Promise<Records<any>>;
    deleteById(id: string): Promise<AirtableRecord<any>>;
    deleteByIds(ids: string[]): Promise<void>;
}
